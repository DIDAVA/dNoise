/*!
 * dNoise.js v1.0.0
 * (c) 2019 DIDAVA Media
 * Released under the MIT License.
 * https://www.didava.ir
 * https://github.com/DIDAVA/dNoise
 */
const AudioContext=window.AudioContext||window.webkitAudioContext;function dNoise(){const e=new AudioContext,t=10*e.sampleRate,n=e.createBuffer(2,t,e.sampleRate);for(var o=0;o<2;o++){let e=n.getChannelData(o);for(var a=0;a<t;a++)e[a]=2*Math.random()-1}const i=e.createGain();i.gain.value=.85;let r=[i],u={};const l=[31,62,125,250,500,1e3,2e3,4e3,8e3,16e3,22050];l.forEach((t,n)=>{const o=e.createBiquadFilter();0==n?o.type="lowshelf":n==l.length-1?o.type="highshelf":o.type="peaking",o.frequency.value=t,Object.defineProperty(u,`q${t}`,{enumerable:!0,get:()=>o.gain.value,set(e){"number"==typeof e&&(o.gain.value=e)}}),r.push(o)});const c=e.createBiquadFilter();c.type="lowpass",c.frequency.value=22050;const s=e.createBiquadFilter();s.type="highpass",s.frequency.value=0;const f=e.createGain();r.push(c,s,f,e.destination),r.forEach((e,t)=>{0!=t&&r[t-1].connect(e)});let h,p,d=0;const v=()=>{this.stop(),(h=e.createBufferSource()).connect(i),h.loop=!0,h.buffer=n,h.start(),d=0,p=setInterval(()=>{d++},1e3)},g=(e,t,n=22050,o=0)=>{c.frequency.value=n,s.frequency.value=o,l.forEach((n,o)=>u[`q${n}`]=parseInt(e+o*t)),v()};this.red=function(){g(15,-6)},this.pink=function(){g(15,-3)},this.white=function(){g(0,0)},this.blue=function(){g(-15,3)},this.violet=function(){g(-51,6)},this.stop=function(){h instanceof AudioBufferSourceNode&&(h.stop(),h.disconnect(i),h=null,clearInterval(p))},Object.defineProperties(dNoise.prototype,{volume:{enumerable:!0,get:()=>f.gain.value,set(e){f.gain.value=e}},modes:{enumerable:!0,writable:!1,configurable:!1,value:["red","pink","white","blue","violet"]},time:{enumerable:!0,get:()=>d},formattedTime:{enumerable:!0,get(){const e=(e,t)=>("000"+e).slice(-1*t),t=Math.floor(d/3600),n=Math.floor(d/60)%60,o=Math.floor(d-60*n);return`${e(t,2)}:${e(n,2)}:${e(o,2)}`}}})}